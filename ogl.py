# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ogl', [dirname(__file__)])
        except ImportError:
            import _ogl
            return _ogl
        if fp is not None:
            try:
                _mod = imp.load_module('_ogl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ogl = swig_import_helper()
    del swig_import_helper
else:
    import _ogl
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def glErrorString(*args):
  return _ogl.glErrorString(*args)
glErrorString = _ogl.glErrorString

def glExtensionSupported(*args):
  return _ogl.glExtensionSupported(*args)
glExtensionSupported = _ogl.glExtensionSupported

def glGetInteger(*args):
  return _ogl.glGetInteger(*args)
glGetInteger = _ogl.glGetInteger

def checkGlError(*args):
  return _ogl.checkGlError(*args)
checkGlError = _ogl.checkGlError

def glSetMatrix(*args):
  return _ogl.glSetMatrix(*args)
glSetMatrix = _ogl.glSetMatrix

def glDrawQuad():
  return _ogl.glDrawQuad()
glDrawQuad = _ogl.glDrawQuad
class oglDisplayList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, oglDisplayList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, oglDisplayList, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ogl.new_oglDisplayList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ogl.delete_oglDisplayList
    __del__ = lambda self : None;
    def isValid(self): return _ogl.oglDisplayList_isValid(self)
    def CompileBegin(self, *args): return _ogl.oglDisplayList_CompileBegin(self, *args)
    def CompileEnd(self): return _ogl.oglDisplayList_CompileEnd(self)
    def Execute(self): return _ogl.oglDisplayList_Execute(self)
oglDisplayList_swigregister = _ogl.oglDisplayList_swigregister
oglDisplayList_swigregister(oglDisplayList)

class oglDisplayListArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, oglDisplayListArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, oglDisplayListArray, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ogl.new_oglDisplayListArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ogl.delete_oglDisplayListArray
    __del__ = lambda self : None;
    def isValid(self): return _ogl.oglDisplayListArray_isValid(self)
    def Init(self, *args): return _ogl.oglDisplayListArray_Init(self, *args)
    def CompileBegin(self, *args): return _ogl.oglDisplayListArray_CompileBegin(self, *args)
    def CompileEnd(self): return _ogl.oglDisplayListArray_CompileEnd(self)
    def Execute(self, *args): return _ogl.oglDisplayListArray_Execute(self, *args)
    def ExecuteAll(self): return _ogl.oglDisplayListArray_ExecuteAll(self)
oglDisplayListArray_swigregister = _ogl.oglDisplayListArray_swigregister
oglDisplayListArray_swigregister(oglDisplayListArray)

class oglFont(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, oglFont, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, oglFont, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ogl.new_oglFont()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ogl.delete_oglFont
    __del__ = lambda self : None;
    def Load(self, *args): return _ogl.oglFont_Load(self, *args)
    def GetWidth(self, *args): return _ogl.oglFont_GetWidth(self, *args)
    def GetWidthf(self, *args): return _ogl.oglFont_GetWidthf(self, *args)
    def Print(self, *args): return _ogl.oglFont_Print(self, *args)
    def Printf(self, *args): return _ogl.oglFont_Printf(self, *args)
oglFont_swigregister = _ogl.oglFont_swigregister
oglFont_swigregister(oglFont)

class oglFrameBufferObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, oglFrameBufferObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, oglFrameBufferObject, name)
    __repr__ = _swig_repr
    def CheckErrors(self): return _ogl.oglFrameBufferObject_CheckErrors(self)
    def __init__(self): 
        this = _ogl.new_oglFrameBufferObject()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ogl.delete_oglFrameBufferObject
    __del__ = lambda self : None;
    def Init(self, *args): return _ogl.oglFrameBufferObject_Init(self, *args)
    def InsertDepthAttachment(self, tex=None): return _ogl.oglFrameBufferObject_InsertDepthAttachment(self, tex)
    def InsertColorAttachment(self, *args): return _ogl.oglFrameBufferObject_InsertColorAttachment(self, *args)
    def Enable(self, set_viewport=False): return _ogl.oglFrameBufferObject_Enable(self, set_viewport)
    def Disable(self): return _ogl.oglFrameBufferObject_Disable(self)
    def Copy(self, *args): return _ogl.oglFrameBufferObject_Copy(self, *args)
    def CopyRegion(self, *args): return _ogl.oglFrameBufferObject_CopyRegion(self, *args)
    def GetWidth(self): return _ogl.oglFrameBufferObject_GetWidth(self)
    def GetHeight(self): return _ogl.oglFrameBufferObject_GetHeight(self)
    def GetColorTexture(self, *args): return _ogl.oglFrameBufferObject_GetColorTexture(self, *args)
    def GetColorTextureID(self, *args): return _ogl.oglFrameBufferObject_GetColorTextureID(self, *args)
    def GetColorAttachment(self, *args): return _ogl.oglFrameBufferObject_GetColorAttachment(self, *args)
    def GetColorCount(self): return _ogl.oglFrameBufferObject_GetColorCount(self)
    def GetDepthTextureID(self): return _ogl.oglFrameBufferObject_GetDepthTextureID(self)
    def GetDepthTexture(self, *args): return _ogl.oglFrameBufferObject_GetDepthTexture(self, *args)
    def GetFboId(self): return _ogl.oglFrameBufferObject_GetFboId(self)
oglFrameBufferObject_swigregister = _ogl.oglFrameBufferObject_swigregister
oglFrameBufferObject_swigregister(oglFrameBufferObject)

class oglShader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, oglShader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, oglShader, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ogl.new_oglShader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ogl.delete_oglShader
    __del__ = lambda self : None;
    def Unload(self): return _ogl.oglShader_Unload(self)
    def Enable(self): return _ogl.oglShader_Enable(self)
    def Disable(self): return _ogl.oglShader_Disable(self)
    def GetAttribLocation(self, *args): return _ogl.oglShader_GetAttribLocation(self, *args)
    def GetUniformLocation(self, *args): return _ogl.oglShader_GetUniformLocation(self, *args)
    def isLoaded(self): return _ogl.oglShader_isLoaded(self)
oglShader_swigregister = _ogl.oglShader_swigregister
oglShader_swigregister(oglShader)

class oglTexture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, oglTexture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, oglTexture, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ogl.new_oglTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ogl.delete_oglTexture
    __del__ = lambda self : None;
    def SetMinFilter(self, *args): return _ogl.oglTexture_SetMinFilter(self, *args)
    def SetMagFilter(self, *args): return _ogl.oglTexture_SetMagFilter(self, *args)
    def SetMinMagFilter(self, *args): return _ogl.oglTexture_SetMinMagFilter(self, *args)
    def isTextureValid(self): return _ogl.oglTexture_isTextureValid(self)
    def GetTexID(self): return _ogl.oglTexture_GetTexID(self)
    def Enable(self): return _ogl.oglTexture_Enable(self)
    def Bind(self, *args): return _ogl.oglTexture_Bind(self, *args)
    def Disable(self): return _ogl.oglTexture_Disable(self)
oglTexture_swigregister = _ogl.oglTexture_swigregister
oglTexture_swigregister(oglTexture)

class oglTexture1D(oglTexture):
    __swig_setmethods__ = {}
    for _s in [oglTexture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, oglTexture1D, name, value)
    __swig_getmethods__ = {}
    for _s in [oglTexture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, oglTexture1D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ogl.new_oglTexture1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ogl.delete_oglTexture1D
    __del__ = lambda self : None;
    def SetWrapS(self, *args): return _ogl.oglTexture1D_SetWrapS(self, *args)
    def TexImage1D(self, *args): return _ogl.oglTexture1D_TexImage1D(self, *args)
    def TexSubImage1D(self, *args): return _ogl.oglTexture1D_TexSubImage1D(self, *args)
    def CopyTexImage1D(self, *args): return _ogl.oglTexture1D_CopyTexImage1D(self, *args)
    def CopyTexSubImage1D(self, *args): return _ogl.oglTexture1D_CopyTexSubImage1D(self, *args)
oglTexture1D_swigregister = _ogl.oglTexture1D_swigregister
oglTexture1D_swigregister(oglTexture1D)

class oglTexture2D(oglTexture):
    __swig_setmethods__ = {}
    for _s in [oglTexture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, oglTexture2D, name, value)
    __swig_getmethods__ = {}
    for _s in [oglTexture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, oglTexture2D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ogl.new_oglTexture2D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ogl.delete_oglTexture2D
    __del__ = lambda self : None;
    def SetWrapS(self, *args): return _ogl.oglTexture2D_SetWrapS(self, *args)
    def SetWrapT(self, *args): return _ogl.oglTexture2D_SetWrapT(self, *args)
    def SetWrapST(self, *args): return _ogl.oglTexture2D_SetWrapST(self, *args)
    def SetAutoMipmap(self, *args): return _ogl.oglTexture2D_SetAutoMipmap(self, *args)
    def SetBorderColor(self, *args): return _ogl.oglTexture2D_SetBorderColor(self, *args)
    def GetWrapS(self): return _ogl.oglTexture2D_GetWrapS(self)
    def GetWrapT(self): return _ogl.oglTexture2D_GetWrapT(self)
    def TexImage2DMipmap(self, *args): return _ogl.oglTexture2D_TexImage2DMipmap(self, *args)
    def TexImage2D(self, *args): return _ogl.oglTexture2D_TexImage2D(self, *args)
    def TexImage2DBorder(self, *args): return _ogl.oglTexture2D_TexImage2DBorder(self, *args)
    def TexSubImage2D(self, *args): return _ogl.oglTexture2D_TexSubImage2D(self, *args)
    def CopyTexImage2D(self, *args): return _ogl.oglTexture2D_CopyTexImage2D(self, *args)
    def CopyTexSubImage2D(self, *args): return _ogl.oglTexture2D_CopyTexSubImage2D(self, *args)
    def GetTexture(self, *args): return _ogl.oglTexture2D_GetTexture(self, *args)
    def DrawTexture(self): return _ogl.oglTexture2D_DrawTexture(self)
oglTexture2D_swigregister = _ogl.oglTexture2D_swigregister
oglTexture2D_swigregister(oglTexture2D)

class oglTexture3D(oglTexture):
    __swig_setmethods__ = {}
    for _s in [oglTexture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, oglTexture3D, name, value)
    __swig_getmethods__ = {}
    for _s in [oglTexture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, oglTexture3D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ogl.new_oglTexture3D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ogl.delete_oglTexture3D
    __del__ = lambda self : None;
    def SetWrapR(self, *args): return _ogl.oglTexture3D_SetWrapR(self, *args)
    def SetWrapS(self, *args): return _ogl.oglTexture3D_SetWrapS(self, *args)
    def SetWrapT(self, *args): return _ogl.oglTexture3D_SetWrapT(self, *args)
    def TexImage3D(self, *args): return _ogl.oglTexture3D_TexImage3D(self, *args)
    def TexSubImage3D(self, *args): return _ogl.oglTexture3D_TexSubImage3D(self, *args)
    def CopyTexSubImage3D(self, *args): return _ogl.oglTexture3D_CopyTexSubImage3D(self, *args)
oglTexture3D_swigregister = _ogl.oglTexture3D_swigregister
oglTexture3D_swigregister(oglTexture3D)

class oglTextureRECT(oglTexture2D):
    __swig_setmethods__ = {}
    for _s in [oglTexture2D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, oglTextureRECT, name, value)
    __swig_getmethods__ = {}
    for _s in [oglTexture2D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, oglTextureRECT, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ogl.new_oglTextureRECT()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ogl.delete_oglTextureRECT
    __del__ = lambda self : None;
    def TexImage2D(self, *args): return _ogl.oglTextureRECT_TexImage2D(self, *args)
    def TexSubImage2D(self, *args): return _ogl.oglTextureRECT_TexSubImage2D(self, *args)
    def CopyTexImage2D(self, *args): return _ogl.oglTextureRECT_CopyTexImage2D(self, *args)
    def CopyTexSubImage2D(self, *args): return _ogl.oglTextureRECT_CopyTexSubImage2D(self, *args)
oglTextureRECT_swigregister = _ogl.oglTextureRECT_swigregister
oglTextureRECT_swigregister(oglTextureRECT)

# This file is compatible with both classic and new-style classes.


